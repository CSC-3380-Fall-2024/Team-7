@page "/mytrips"
@using Google.Cloud.Firestore

<PageTitle>My Trips</PageTitle>

<body>
    <h3>My Trips</h3>
    
    <div class="upcoming-trips">
        <h5>Upcoming Trips</h5>
        @foreach(var hotel in hotelInfo.Take(2)) {  @*Only display the first two hotels, needed to pull from actual users*@
            <div class="hotel-info-border" style="margin-bottom: 1.5rem;">
                <div class="column" style="width: 35%;">
                    <img src="@hotel.s_hotelImgPath" class="center" alt="Hotel Image" style="border-radius: 6px; height: 15rem;">
                </div>
                <div class="column" style="width: 45%">
                    <h1 class="filter-heading-text" style="text-align: left; font-size: 24px;">@hotel.s_name</h1>
                    <p style="margin-bottom: 0.5rem; font-size: 0.9rem;">Rating: @hotel.d_rating (@hotel.i_reviewCount reviews)</p>
                    <b class="filter-heading-text" style="font-size: 0.9rem;">@hotel.s_slogan</b>
                    <p style="font-size: 0.9rem;">@hotel.s_description</p>
                    <button class="button-to-book">See Rooms</button>
                </div>
                <div class="column" style="width: 20%">
                    <p>The price is $@hotel.d_price</p>
                </div>
            </div>
        }
    </div>        

    <div class="previous-trips">
        <h5>Previous Trips</h5>
    </div>

    <div class="history-suggestion">
        <h4>Based on your history</h4>
        
    </div>
</body>

<style>
.flex-container {
  display: flex;
  flex-direction: column;
  /*background-color: #f1f1f1;*/
}

/* This is the container that modifies a div so that it can fit whatever information is needed. E.g: an image or a rating */
.flex-container > div {
  /*background-color: DodgerBlue;*/
  color: black;
  margin: 0.2rem;  
}

/* Container that moves a section to the left */
.left {
	width: 100%;
}

/* Container that moves a section to the right */
.right {
	width: 100%;
}

.hotel-info-border {
  width: 100%;
  height: 240px;
  top: 426px;
  left: 425px;
  gap: 0px;
  border-radius: 0.3rem 0.3rem 0.3rem 0.3rem;
  margin-left: auto;
  margin-right: auto;
  opacity: 0px;
  border: 1px solid #E0E0E0
}

.column {
  float: left;
  padding: 1%;
  height: 100%;
  width: 50%;
}


/* The border that houses the filter information */
.filter-box {
    width: 30rem;
    height: 293px;
    top: 466px;
    left: 111px;
    max-width: fit-content;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 2rem;
    gap: 0px;
    border-radius: 6px 6px 0px 0px;
    border: 0.1rem solid #E0E0E0;
    opacity: 0.1rem;
}

.filter-box-top {
  width: 30rem;
  height: 3rem;
  top: 466px;
  left: 111px;
  padding: 18px 0px 0px 0px;
  gap: 10px;
  border-radius: 6px 6px 0px 0px;
  opacity: 0px;
  background-color: #E0E0E0;
}

.filter-heading-text {
  width: 30rem;
  height: 20px;
  gap: 0px;
  opacity: 0px;
  font-family: Fraunces;
  font-size: 16px;
  font-style: italic;
  font-weight: 999;
  line-height: 19.73px;
  letter-spacing: 0.01em;
  text-align: center;
  text-underline-position: from-font;
  text-decoration-skip-ink: none;
}

/* This modifies the img tag so that it scales with the size of the screen */ 
img {
	max-width: 100%;
  max-height: 100%;
	height: auto;
	width: auto\9;
}

/* At a certain pixel width, makes the column layout into a row layout */
@media (min-width: 950px) {
  .flex-container {
    flex-direction: row;
    width: 100%;
  }

  .flex-container > div {
	height: 10%;
  }

  .left {
	width: 35%;
	height: 80%;
  }

  .filter-box {
    width: 20.1rem;
  }

  .filter-button {
    width: 20px;
    height: 20px;
    top: 539px;
    left: 129px;
    gap: 0px;
    border-radius: 5px 0px 0px 0px;
    border: 1px 0px 0px 0px;
    opacity: 0px;

  }

  .filter-box-top {
   width: 20rem;
  }

  .filter-heading-text {
    width: 20rem;
  }

  .right {
	width: 65%;
	height: 80%;
  }

  .hotel-info-border {
    width: 90%;
    height: 240px;
    top: 426px;
    left: 425px;
    gap: 0px;
    border-radius: 0.3rem 0.3rem 0.3rem 0.3rem;
    opacity: 0px;
    border: 1px solid #E0E0E0
  }

  img {
    max-width: 100%;
    width: 100%;
  }


</style>

@code {
    FirestoreDb db = FirestoreDb.Create("hotelmanagementsystem-3f342");

    public class c_hotelInfo {
		public string s_id {get; set;} = string.Empty;
		public string s_name {get; set;} = string.Empty;
		public string s_hotelImgPath {get; set;} = string.Empty;
		public double d_rating {get; set;} = 0.0;
		public double d_price {get; set;} = 0.0;
		public int i_reviewCount {get; set;} = 0;
		public string s_slogan {get; set;} = string.Empty;
		public string s_description {get; set;} = string.Empty;
	}

	private IEnumerable<c_hotelInfo> hotelInfo = Array.Empty<c_hotelInfo>();

    protected override async Task OnInitializedAsync() {
		await refreshList();
	}

    private async Task refreshList() {

		// List of colection references to be able to access different parts of the database
		CollectionReference cr_hotels =  db.Collection("Hotels");
		QuerySnapshot qs_hotelDocs = await cr_hotels.GetSnapshotAsync();

		var lst = new List<c_hotelInfo>();
			foreach (var doc in qs_hotelDocs.Documents)
            {
				DocumentReference cr_hotelImg = cr_hotels.Document(doc.Id).Collection("images").Document("0");
				DocumentSnapshot hotelImgs = await cr_hotelImg.GetSnapshotAsync();
                lst.Add(new c_hotelInfo{s_id = doc.Id, 
				s_name = doc.GetValue<string>("name"), 
				s_hotelImgPath = hotelImgs.GetValue<string>("path"),
				d_rating = doc.GetValue<double>("rating"),
				d_price = doc.GetValue<double>("price"),
				i_reviewCount = doc.GetValue<int>("review_count"),
				s_slogan = doc.GetValue<string>("slogan"),
				s_description = doc.GetValue<string>("description")
				});
            }
        hotelInfo = lst;
	}

}