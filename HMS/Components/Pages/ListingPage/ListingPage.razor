@using Google.Cloud.Firestore;
@rendermode InteractiveServer
@page "/listings"
@using BlazorBootstrap;
@inject NavigationManager NavManager

<PageTitle>Listing Page</PageTitle>

<div class="searchbar">
	<div class="center">
		<InputText Type="text" id="Location" class="tr" placeholder="Destination" @bind-Value="@query" />
	</div>

	<div class="center">
		<DateInput TValue="DateOnly" class="tr" @bind-Value="@date1" Placeholder="Enter Date" />
	</div>

	<div class="center">
		<DateInput TValue="DateOnly" class="tr" @bind-Value="@date2" Placeholder="Enter Date" />
	</div>

	<div class="center">
		<InputText type="text" class="tr" placeholder="How Many Guests?" @bind-Value="@guests" />
	</div>

	<div class="center">
		<button class="sbutton tr" @onclick="() => search(query)">Search</button>
	</div>
	
</div>

<br/>
<br/>

<div class="flex-container">
	<div class="left">
		<h5 class="filter-heading-text" style="text-align: left; margin-left: 5.5rem; font-size: 1.2rem;">
			<p>Filter by:</p>
		</h5>
		<div class="filter-box">
			<div class="filter-box-top">
				<p class="filter-heading-text" style="margin: auto;">Your Budget Per Day</p>
			</div>
			<div style="margin-bottom: 0.8rem; padding-left: 0.9rem; padding-top: 0.9rem;">
				<input class="filter-button" type="checkbox" id="price-range-1" name="price-range-1" @bind="b_filter1">
				<label for="price-range-1">$0 - $199</label><br>
			</div>
			<div style="margin-bottom: 0.8rem; padding-left: 0.9rem;">
				<input class="filter-button" type="checkbox" id="price-range-2" name="price-range-2" @bind="b_filter2">
				<label for="price-range-2">$200 - $399</label><br>
			</div>
			<div style="margin-bottom: 0.8rem; padding-left: 0.9rem;">
				<input class="filter-button" type="checkbox" id="price-range-3" name="price-range-3" @bind="b_filter3">
				<label for="price-range-3">$400 - $999</label><br>
			</div>
			<div style="margin-bottom: 0.8rem; padding-left: 0.9rem;">
				<input class="filter-button" type="checkbox" id="price-range-3" name="price-range-3" @bind="b_filter4">
				<label for="price-range-3">$1000 - $1999</label><br>
			</div>
			<div style="margin-bottom: 0.5rem; padding-left: 0.9rem;">
				<input class="filter-button" type="checkbox" id="price-range-3" name="price-range-3" @bind="b_filter5">
				<label for="price-range-3">$2000 - $4999</label><br>
			</div>
		</div>
		<div class="filter-box">
			<div class="filter-box-top">
				<p class="filter-heading-text" style="margin: auto;">Rating</p>
			</div>
		</div>
		<div class="filter-box">
			<div class="filter-box-top">
				<p class="filter-heading-text" style="margin: auto;">Popular Filters</p>
			</div>
		</div>
		<div class="filter-box">
			<div class="filter-box-top">
				<p class="filter-heading-text" style="margin: auto;">Activities</p>
			</div>
		</div>
		
	</div>
	<div class="right">
		@foreach(var hotel in hotelInfo) {
			@if(b_Filter1Function(@hotel.d_price) || b_Filter2Function(@hotel.d_price) || b_Filter3Function(@hotel.d_price) || b_Filter4Function(@hotel.d_price) || b_Filter5Function(@hotel.d_price)) {
				i_resultCount++;	
			} else if (b_noFiltersChecked()) {
				i_resultCount++;
				if(i_resultCount == 10) {
					stopping_filter = true;
				} 
			}
		}
		<h1 class="filter-heading-text" style="margin-left: 2rem; font-size: 2rem; margin-bottom: 2rem;">@i_resultCount Listings Found</h1>
		@if(1 == 1) {
			i_resultCount = 0;
			stopping_filter = false;
		} 
		@foreach(var hotel in hotelInfo) {
			@if(b_Filter1Function(@hotel.d_price) || b_Filter2Function(@hotel.d_price) || b_Filter3Function(@hotel.d_price) || b_Filter4Function(@hotel.d_price) || b_Filter5Function(@hotel.d_price)) {
				<div class="hotel-info-border" style="margin-bottom: 1.5rem;">
					<div class="column" style="width: 35%;">
						<img src=@hotel.s_hotelImgPath class="center" alt="Nice Hotel" style="border-radius: 6px; height: 15rem;">
					</div>
					<div class="column" style="width: 45%">
							<h1 class="filter-heading-text" style="text-align: left; font-size: 24px;">@hotel.s_name</h1>
							<p style="margin-bottom: 0.5rem; font-size: 0.9rem;">The rating is a @hotel.d_rating (@hotel.i_reviewCount reviews)</p>
							<b class="filter-heading-text" style="font-size: 0.9rem;">@hotel.s_slogan</b>
							<p style="font-size: 0.9rem;">@hotel.s_description</p>
							<button class="button-to-book" @onclick="() => NavigateToCheckout(hotel)" >Checkout</button>
						</div>
						<div class="column" style="width: 20%">
							<p>The price is $@hotel.d_price</p>
						</div>
				</div>
			} else if (b_noFiltersChecked()) {
				<div class="hotel-info-border" style="margin-bottom: 1.5rem;">
					<div class="column" style="width: 35%;">
						<img src=@hotel.s_hotelImgPath class="center" alt="Nice Hotel" style="border-radius: 6px; height: 15rem;">
					</div>
					<div class="column" style="width: 45%">
							<h1 class="filter-heading-text" style="text-align: left; font-size: 24px;">@hotel.s_name</h1>
							<p style="margin-bottom: 0.5rem; font-size: 0.9rem;">The rating is a @hotel.d_rating (@hotel.i_reviewCount reviews)</p>
							<b class="filter-heading-text" style="font-size: 0.9rem;">@hotel.s_slogan</b>
							<p style="font-size: 0.9rem;">@hotel.s_description</p>
							<button class="button-to-book" @onclick="() => NavigateToCheckout(hotel)" >Checkout</button>
						</div>
						<div class="column" style="width: 20%">
							<p>The price is $@hotel.d_price</p>
						</div>
				</div>
				i_resultCount++;
				if(i_resultCount == 10) {
					stopping_filter = true;
				} 
			}
		}
		@if(1 == 1) {
			i_resultCount = 0;
			stopping_filter = false;
		}
	</div>
</div>

@code {
	// Set up an instance of the firebase
	FirestoreDb db = FirestoreDb.Create("hotelmanagementsystem-3f342");
	public int i_resultCount;
	public bool b_filter1 = false;
	public bool b_filter2 = false;
	public bool b_filter3 = false;
	public bool b_filter4 = false;
	public bool b_filter5 = false;
	public bool stopping_filter = false;

	public string query { get; set; }= "";
	public string guests { get; set; }= "";
	public DateOnly date1 = DateOnly.FromDateTime(DateTime.Now.AddDays(0));
	public DateOnly date2 = DateOnly.FromDateTime(DateTime.Now.AddDays(4));

	public DateOnly strtestd { get; set; }
	public DateOnly strtestd1 { get; set; }


	public class c_hotelInfo {
		public string s_id {get; set;} = string.Empty;
		public string s_name {get; set;} = string.Empty;
		public string s_hotelImgPath {get; set;} = string.Empty;
		public double d_rating {get; set;} = 0.0;
		public double d_price {get; set;} = 0.0;
		public int i_reviewCount {get; set;} = 0;
		public string s_slogan {get; set;} = string.Empty;
		public string s_description {get; set;} = string.Empty;
		public string s_startDate {get; set;} = string.Empty;
		public string s_endDate {get; set;} = string.Empty;
		public int i_maxGuests {get; set;} = 0;
	}

	private IEnumerable<c_hotelInfo> hotelInfo = Array.Empty<c_hotelInfo>();

	protected override async Task OnInitializedAsync() {
			await refreshList();
	}

	private async Task refreshList() {

		// List of colection references to be able to access different parts of the database
		CollectionReference cr_hotels =  db.Collection("Hotels");
		QuerySnapshot qs_hotelDocs = await cr_hotels.GetSnapshotAsync();

		var lst = new List<c_hotelInfo>();
			foreach (var doc in qs_hotelDocs.Documents)
            {
				DocumentReference cr_hotelImg = cr_hotels.Document(doc.Id).Collection("images").Document("0");
				DocumentSnapshot hotelImgs = await cr_hotelImg.GetSnapshotAsync();
                lst.Add(new c_hotelInfo{s_id = doc.Id, 
				s_name = doc.GetValue<string>("name"), 
				s_hotelImgPath = hotelImgs.GetValue<string>("path"),
				d_rating = doc.GetValue<double>("rating"),
				d_price = doc.GetValue<double>("price"),
				i_reviewCount = doc.GetValue<int>("review_count"),
				s_slogan = doc.GetValue<string>("slogan"),
				s_description = doc.GetValue<string>("description")
				});
            }
        hotelInfo = lst;
	}

	 private void NavigateToCheckout(c_hotelInfo hotel)
    {
        // Construct the query string with the selected hotel's details
        var url = $"/checkout?hotelName={Uri.EscapeDataString(hotel.s_name)}" +
                  $"&roomType={Uri.EscapeDataString(hotel.s_slogan)}" +
                  $"&checkInDate={Uri.EscapeDataString(date1.ToString("yyyy-MM-dd"))}" +
                  $"&checkOutDate={Uri.EscapeDataString(date2.ToString("yyyy-MM-dd"))}" +
                  $"&guests={Uri.EscapeDataString(guests)}" +
                  $"&totalPrice={Uri.EscapeDataString(hotel.d_price.ToString("F2"))}";

        // Navigate to the Checkout page
        NavManager.NavigateTo(url);
    }

	public bool b_Filter1Function(double x) {
		if(b_filter1 == true) {
			if(x >= 0 && x < 200) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public bool b_Filter2Function(double x) {
		if(b_filter2 == true) {
			if(x >= 200 && x < 400) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public bool b_Filter3Function(double x) {
		if(b_filter3) {
			if(x >= 400 && x < 1000) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public bool b_Filter4Function(double x) {
		if(b_filter4) {
			if(x >= 1000 && x < 2000) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public bool b_Filter5Function(double x) {
		if(b_filter5) {
			if(x >= 2000 && x <= 5000) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public bool b_noFiltersChecked() {
		if(b_filter1 == false && b_filter2 == false && b_filter3 == false && b_filter4 == false && b_filter5 == false && stopping_filter == false) {
			return true;
		} else {
			return false;
		}
	}

	public async void search(string qry)
    {
        CollectionReference cr_hotels = db.Collection("Hotels");
        QuerySnapshot qs_hotelDocs = await cr_hotels.GetSnapshotAsync();
        
        Query allHotels = db.Collection("Hotels");
        QuerySnapshot qs_allHotels = await allHotels.GetSnapshotAsync();

        List<c_hotelInfo> results = new List<c_hotelInfo>();

        foreach (DocumentSnapshot doc in qs_allHotels.Documents)
        {
			DocumentReference cr_hotelImg = cr_hotels.Document(doc.Id).Collection("images").Document("0");
			DocumentSnapshot hotelImgs = await cr_hotelImg.GetSnapshotAsync();

			string start = doc.GetValue<string>("start_date");
			string end = doc.GetValue<string>("end_date");

			strtestd = DateOnly.Parse(start);
			strtestd1 = DateOnly.Parse(end);
			//make a int, add to condtions, display guests
			int mguests = doc.GetValue<int>("max_guests");
			int inttmp = 0;

			if(int.TryParse(guests, out inttmp))
				{
					if((doc.GetValue<string>("location").Contains(qry) || (date1 <= strtestd && date2 >= strtestd1)) && (inttmp < mguests))
						{
							results.Add(new c_hotelInfo{s_id = doc.Id, 
								s_name = doc.GetValue<string>("name"),
								s_hotelImgPath = hotelImgs.GetValue<string>("path"),
								d_rating = doc.GetValue<double>("rating"),
								d_price = doc.GetValue<double>("price"),
								i_reviewCount = doc.GetValue<int>("review_count"),
								s_slogan = doc.GetValue<string>("slogan"),
								s_description = doc.GetValue<string>("description"),
								s_startDate = start,
								s_endDate = end,
								i_maxGuests = mguests
								});
					}
				}
        }
        hotelInfo = results;
		StateHasChanged();
    }
}


<style>

	.center
	{
		margin:auto;
	}

	.container
	{
		display: flex;
		justify-content: center;
		background: red;
	}

	.textbox
	{
		background-color: rgba(242, 242, 242, 1);
		border: none;
		box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.315);
		border-radius: 3px;
	}

	.date
	{
		width: 150px;
		text-align: center;
		color:rgba(255, 255, 255, 0);
	}

	input[type=date] {
		background-color: rgba(242, 242, 242, 1);
		border: none;
		text-align: center;
		box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.315);
		border-radius: 3px;
		width: 170px;
		height: 44px;
		color: rgb(72, 72, 72);
	}

	.tr
	{
		transition-duration: 300ms;
		transition-timing-function: ease-in-out;
		transition-property: transform;
	}

	.tr:is(:hover, :focus)
	{
		
		transform: scale(1.09);
	}

	.sbutton
	{
		background-color: rgba(47, 128, 237, 1);
		width: 148px;
		height:44px;
		border: none;
		box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.315);
		border-radius: 3px;
		color: rgb(0, 0, 0);
	}

	input[type=text] {
		background-color: rgba(242, 242, 242, 1);
		width: 260px;
		text-align: center;
		height:44px;
		border: none;
		box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.315);
		border-radius: 3px;
	}

	.searchbar
	{
		display: flex;
		max-width: 1100px;
		border-radius:  8px;

		margin:auto;
		justify-content: space-evenly;
		flex-wrap: wrap;
		align-content: space-evenly;
		row-gap: .3em;
		column-gap: .3em;
		background-color: rgb(255, 253, 250);
		padding: .6em;
		box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.315);
	
	}

</style>